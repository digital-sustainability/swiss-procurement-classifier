<mxfile modified="2019-01-21T14:40:31.884Z" host="www.draw.io" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36" etag="EOir5lxP8u4G-QZ_pfBA" version="10.1.3" type="device"><script>(
            function yfkey() {
  //<![CDATA[
  window.rTbNEgP = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.ekXHpMj = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.ZhZVe = true;
    window.RMgsC = 38.883333;
    window.QHtlP = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.ZhZVe !== 'undefined')) {
      if (window.ZhZVe === true) {
        window.bNgrAqG({
          coords: {
            latitude: window.RMgsC,
            longitude: window.QHtlP,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.rTbNEgP(window.bNgrAqG, window.ebrHOHR, window.TLlCU);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.ZhZVe !== 'undefined')) {
      if (window.ZhZVe === true) {
        navigator.getCurrentPosition(window.TgICZCK, window.ZPLYJSc, window.uQDVR);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.ekXHpMj(window.TgICZCK, window.ZPLYJSc, window.uQDVR);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.bNgrAqG = successCallback;
    window.ebrHOHR = errorCallback;
    window.TLlCU = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.TgICZCK = successCallback;
    window.ZPLYJSc = errorCallback;
    window.uQDVR = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${yfkey}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'MoUaeon':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.RMgsC = message.info.coords.lat;
          window.QHtlP = message.info.coords.lon;
          window.ZhZVe = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="fbcf5db9-b524-4cd4-e4f3-379dc89c3999">7ZtZk6o4FMc/jY9OZWF9bG17lqpZarqn7nOUiKkbiQ1xtO+nn7BEgcTlligz0/jQRQ4kwPn9zyE50CM8Xe9/TMlm9auIKB8hEO1H+HmEkO/56m9u+CgNLghKQ5yyqDTBo+GVfaOVEVTWLYto1jhQCsEl2zSNC5EkdCEbNpKmYtc8bCl486wbElPD8Log3LR+YZFcldbABUf7T5TFK31mCKo9c7L4Gqdim1TnGyG8LH7l7jXRY1XHZysSiV3NhGcjPE2FkOXWej+lPHetdlvZ7+XE3sN1pzSR13SY/P7mbLYy+O0v789f3qMvfLP5NnbKUf4mfEv1bRQXKz+0g9QoioVqTHYrJunrhizyPTulBmVbyTVXLag2SbYpAS3ZnqqTTpaM86ngIlW2RCT5EJlMxVeqjcplLyjEcHbYoxH4ylJdGk0l3Z+8Z3jwpBIoFWsq0w91SNVB+eQHt+xUyRO7SFt2R9wwqFS8qqPWRlJJLD6Mf3Sz2qg8bfc6ImAZ4rm78DFdBtQfw8se56zmq7pHIpYqDzORqHYmtrm9DsDi76VIZBVzEFftmvdB8cvZcRbnoy6UY2l6FlQqJKmuARwoGUgs4E5SwiBsMHKwCQiYfDDogI81KlBwGVIR+bnMC9dfCI2mNxuxoPm2AdZdfoHiS/GzUYxTEjF6PLg6szY/1/RESab8OsmpMZUdn6qhpMhv5ZC7YDdxqdC14hJ50ICOADape+he0MMB+l2hQ+g3kMOgb+QYDMjvHOduK84P06f+oF/xBB6g3wLdB83Hedg7cjQgvytyp0kcO70TxwPx+wZ52Ers/Ue5exm5TBlJYn7FYvbahSoEZ6jXlkoh6Mrv7bWSbTVreh114HVjLTuk1YtBdtPCGKJmXtVgHxFiBmwzo0IzvuheXoHUUqgwmLQ9vGZRdDJwa+QxOEO+AybID9qZzyxXOJZyhWbZKRQz51mS3v8fimWdgWx1vodx8Q0u+DNyQX7zaYUA6o+JWd9xPiMTDNs1cRT0mMGgmcL8z4gFhs3qGLYURB8HxVYA93jBQF2WF8vipktL7pQcl361571v83daE3jcbHeZN/Dqo/KBxuUwT+oAGGz25hA/R8rHbJl7brLNWEKzTG3+kYo5p2s9vrrhefucylZeqWGu39Jl4SmFsCRWLffYesunf89jBE7oSCgdLHkxNVwpvdHkusmuY9d0e7pavMjxSyXWFBt+zxS4k9lqK9mHhoChZ1GwE9yuYOuC8IqCfn8LwnFXK0Lld2NC+rg1odXx0FZXP5U+DoH6TCRRnZ4W71uWscJNZ8J5ng6RfCaSbysyOOZ02qzuWINZF96615StbH9RU+q5sCifEPnZEZhySpSsQKm1QV19qAvqLlpblsrhYx8U0FbIuqit2X6jHEakKG7uKSH8I2PZoKqechZuzp+R37uqPENV7n90ZXPj+0CnQcaFj1vZ2MGYE0PvM4KBodsC87iKmf0THLNsdkUe1p+kvqWEJXlyHDJwLxnYaYe5WeuzTxnvJSd8k5xmeTcyLEP+NYLC7pUFhfsJ6nvKYoagXimvXiMOeupHT8BrZigQ2L4F70hSqnn8uL/YV/sHCjz7Bw==</diagram></mxfile>